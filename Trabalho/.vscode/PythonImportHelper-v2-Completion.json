[
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "generalPath",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "generalPath = \"C:\\\\Users\\\\bruni\\\\OneDrive\\\\Documentos\\\\GitHub\\\\EDA2001\\\\Trabalho\\\\\"\n# (2) Gráfico do caso médio da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceAverageCase.txt\", 'r') as f:\n    lines = f.readlines()\naverageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "averageVector",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "averageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "ypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "worstVector",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "worstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVector[j] = float(vector[j])\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\RedBlackTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "ypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\RedBlackTree.png\")\nplt.close()\nf.close()\n# (4) Gráfico do caso médio da árvore AVL:",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "averageVector",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "averageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "ypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "worstVector",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "worstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVector[j] = float(vector[j])\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AVLTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotEachResult",
        "description": "PlotEachResult",
        "peekOfCode": "ypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AVLTree.png\")\nplt.close()\nf.close()",
        "detail": "PlotEachResult",
        "documentation": {}
    },
    {
        "label": "generalPath",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "generalPath = \"C:\\\\Users\\\\bruni\\\\OneDrive\\\\Documentos\\\\GitHub\\\\EDA2001\\\\Trabalho\\\\\"\n# (2) Gráfico do caso médio da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceAverageCase.txt\", 'r') as f:\n    lines = f.readlines()\naverageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "averageVector",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "averageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "ypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (Red-Black)\")\nf.close()\n# (3) Gráfico do pior caso da árvore Rubro-Negra:\nwith open(generalPath + \"RedBlackTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "worstVector",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "worstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVector[j] = float(vector[j])\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nf.close()\n# (4) Gráfico do caso médio da árvore AVL:",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nf.close()\n# (4) Gráfico do caso médio da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceAverageCase.txt\", 'r') as f:\n    lines = f.readlines()\naverageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "ypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (Red-Black)\")\nf.close()\n# (4) Gráfico do caso médio da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceAverageCase.txt\", 'r') as f:\n    lines = f.readlines()\naverageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "averageVector",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "averageVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        averageVector[j] += float(vector[j])/10\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "ypoints = np.array(averageVector)\nplt.plot(xpoints, ypoints, label=\"Average (AVL)\")\nf.close()\n# (5) Gráfico do pior caso da árvore AVL:\nwith open(generalPath + \"AVLTree\\\\PerformanceWorstCase.txt\", 'r') as f:\n    lines = f.readlines()\nworstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "worstVector",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "worstVector = [0 for i in range(len(lines[0].split()))]\nfor line in lines:\n    vector = line.split()\n    for j in range(len(vector)):\n        worstVector[j] = float(vector[j])\nxpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "xpoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "xpoints = np.array([x for x in range(0, len(averageVector))])\nypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AllTrees.png\")\nf.close()",
        "detail": "PlotGeneralResult",
        "documentation": {}
    },
    {
        "label": "ypoints",
        "kind": 5,
        "importPath": "PlotGeneralResult",
        "description": "PlotGeneralResult",
        "peekOfCode": "ypoints = np.array(worstVector)\nplt.plot(xpoints, ypoints, label=\"Worst (AVL)\")\nplt.title(\"Average Case vs Worst Case\")\nplt.xlabel(\"Elementos na árvore\")\nplt.ylabel(\"Etapas\")\nplt.legend(loc=\"upper left\")\nplt.savefig(generalPath + \"Graphics\\\\AllTrees.png\")\nf.close()",
        "detail": "PlotGeneralResult",
        "documentation": {}
    }
]